from llama_cpp import Llama
from llama_cpp.llama_chat_format import MiniCPMv26ChatHandler
import base64
from PIL import Image


from time import time
start = time()




image_path = "./test_images/moon.jpg"
# Lossy is highly recommended
lossless = False

def image_to_base64_data_uri(file_path):
    with open(file_path, "rb") as img_file:
        base64_data = base64.b64encode(img_file.read()).decode('utf-8')
        return f"data:image/png;base64,{base64_data}"


chat_handler = MiniCPMv26ChatHandler(clip_model_path="model/minicpm-v2_6/mmproj-model-f16.gguf")
llm = Llama(
    model_path="model/minicpm-v2_6/ggml-model-Q8_0.gguf",
    chat_handler=chat_handler,
    n_ctx=4906,  # n_ctx should be increased to accommodate the image embedding
    verbose=True,
    n_threads=16,
)


#114 seconds with threads not specified
#126 seconds with 8 threads
#83 seconds with 16 threads
#144 seconds with 24 threads

data_uri = image_to_base64_data_uri(image_path)

print("GENERATING PROMPT...")


description = llm.create_chat_completion(
    messages=[
        {"role": "system", "content": "You are MiniCPMv-2.6, an image description model. Your task is to provide a precise and factual description of the given image. Describe the image by specifying all observable elements including: Objects and their spatial relationships, Colors and textures, Sizes and shapes, Positions and orientations, Any textual or numerical data present, Avoid assumptions, interpretations, or metaphors. Your description should be a direct and unambiguous account of what is visually present in the image."},
        {
            "role": "user",
            "content": [
                {"type": "text", "text": """
Provide a comprehensive and factual description of the image, focusing on all visible elements. Identify distinct objects and entities, detailing their appearance and notable characteristics. Consider their positioning in relation to each other, noting spatial relationships and distances where discernible. Include the orientation and rotation of each object, specifying any tilts or angles relative to the imageâ€™s axes or other elements.

Describe the color of each object, noting any shading, patterns, or gradients, and specify adjacent or overlapping colors. Estimate the size or dimensions of objects relative to each other, and analyze their shapes, mentioning any geometric or irregular forms with curves, edges, or angles. If the image contains text or numbers, transcribe them and include details on font type, size, color, and placement.

In addition, describe the background and context, including textures or colors, and provide any contextual clues that enhance the understanding of the scene. Pay attention to the lighting conditions, explaining how they influence object visibility, and mention any shadows cast, noting their position. Finally, include any additional relevant details that contribute to a full understanding of the image. Specify the art style of the image if it had been generated by an AI. Maintain an objective, precise tone throughout, avoiding speculation or subjective interpretation.
"""},
                {"type": "image_url", "image_url": {
                    "url": data_uri}}
            ]
        }
    ],
    temperature=0.1,
)["choices"][0]["message"]["content"]
print(description)



print("RETRIEVING PALETTE...")
colors = []
img = Image.open(image_path)
if not lossless:
    img = img.quantize(colors=100).convert("RGB")

for x in range(img.width):
    for y in range(img.height):
        color = img.getpixel((x, y))
        if color not in colors:
            colors.append(img.getpixel((x, y)))

print(colors)

print("WRITING TO FILE...")
with open("test.imagine", "w+") as f:
    f.write(str(img.width)+"#"+str(img.height)+"#"+description + " -- The RGB colors you must use in the image are the following: " + str(colors))
print("OPERATION COMPLETED SUCCESSFULLY")


end = time()
print(f"EXECUTED IN {end-start} SECONDS")
